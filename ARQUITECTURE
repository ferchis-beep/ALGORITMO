{
// Conectar con la BD

const mysql = require('mysql2');

const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root', // Cambia esto por tu usuario de MySQL
  password: '', // Cambia esto por tu contraseña de MySQL
  database: 'quotationDB'
});

connection.connect((err) => {
  if (err) throw err;
  console.log('Connected to MySQL database!');
});

module.exports = connection;

}

{ //factory para cotizacion (creación de objetos)

    class Quotation {
        constructor(clientId, products) {
          this.clientId = clientId;
          this.products = products;
          this.createdAt = new Date();
          this.totalPrice = this.calculateTotalPrice();
        }
      
        calculateTotalPrice() {
          return this.products.reduce((total, product) => {
            return total + (product.quantity * product.price);
          }, 0);
        }
      }
      
      class QuotationFactory {
        static createQuotation(clientId, products) {
          return new Quotation(clientId, products);
        }
      }
      
      module.exports = QuotationFactory;

      
}
{

    //Servicio para Guardar Cotizaciones
    const db = require('./db');

    class QuotationService {
      static saveQuotation(quotation) {
        return new Promise((resolve, reject) => {
          const query = 'INSERT INTO quotations SET ?';
          const data = {
            client_id: quotation.clientId,
            total_price: quotation.totalPrice
          };
    
          db.query(query, data, (err, result) => {
            if (err) return reject(err);
            const quotationId = result.insertId;
    
            const itemsQuery = 'INSERT INTO quotation_items (quotation_id, product_id, quantity, color, size) VALUES ?';
            const itemsData = quotation.products.map(product => [
              quotationId, product.productId, product.quantity, product.color, product.size
            ]);
    
            db.query(itemsQuery, [itemsData], (err) => {
              if (err) return reject(err);
              resolve(quotationId);
            });
          });
        });
      }
    }
    
    module.exports = QuotationService;

}

{
// Generación de PDFs

const PDFDocument = require('pdfkit');
const fs = require('fs');

class PDFFacade {
  static generateQuotationPDF(quotation, outputPath) {
    const doc = new PDFDocument();
    doc.pipe(fs.createWriteStream(outputPath));

    doc.fontSize(25).text('Quotation', { align: 'center' });
    doc.moveDown();

    doc.fontSize(12).text(`Client ID: ${quotation.clientId}`);
    doc.text(`Date: ${quotation.createdAt}`);
    doc.moveDown();

    doc.fontSize(18).text('Products');
    quotation.products.forEach(product => {
      doc.fontSize(12).text(
        `Product ID: ${product.productId}, Quantity: ${product.quantity}, Color: ${product.color}, Size: ${product.size}`
      );
    });
    doc.moveDown();

    doc.fontSize(16).text(`Total Price: $${quotation.totalPrice}`, { align: 'right' });

    doc.end();
  }
}

module.exports = PDFFacade;


}
{
//Servidor Express

const express = require('express');
const QuotationFactory = require('./quotationFactory');
const QuotationService = require('./quotationService');
const PDFFacade = require('./pdfFacade');

const app = express();
app.use(express.json());

app.post('/create-quotation', async (req, res) => {
  const { clientId, products } = req.body;

  const quotation = QuotationFactory.createQuotation(clientId, products);

  try {
    const quotationId = await QuotationService.saveQuotation(quotation);
    PDFFacade.generateQuotationPDF(quotation, `quotation-${quotationId}.pdf`);
    res.json({ message: 'Quotation created successfully', quotationId });
  } catch (error) {
    res.status(500).json({ error: 'Failed to create quotation' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

}